import json
import time
from datetime import datetime, timezone, timedelta
from urllib.error import HTTPError
from config.builder import Builder

from config.json_config import JsonConfig
from presentation.observer import Observable

REFRESH_INTERVAL = 60 * 15
DATA_SLICE_DAYS = 1
DATETIME_FORMAT = "%Y-%m-%dT%H:%M"
API_URL = 'https://production.api.coindesk.com/v2/price/values/BTC?ohlc=false'


def fetch_prices():
    timeslot_end = datetime.now(timezone.utc)
    end_date = timeslot_end.strftime(DATETIME_FORMAT)
    start_data = (timeslot_end - timedelta(days=DATA_SLICE_DAYS)).strftime(DATETIME_FORMAT)
    url = f'{API_URL}&start_date={start_data}&end_date={end_date}'
    # req = urllib.request.Request(url)
    # data = urllib.request.urlopen(req).read()
    data = '{"statusCode":200,"message":"OK","data":{"iso":"BTC","name":"Bitcoin","slug":"bitcoin","interval":"15-minute","entries":[[1609713899000,33002.5364270397],[1609714799000,32911.5698283787],[1609715699000,33107.2382545703],[1609716599000,33381.8493827118],[1609717499000,33125.8908627566],[1609718399000,32692.0448141222],[1609719299000,32475.9268460343],[1609720199000,32626.5101354739],[1609721099000,32475.3553657859],[1609721999000,32641.3299141279],[1609722899000,32581.5757301842],[1609723799000,32491.229599695],[1609724699000,32881.3319427863],[1609725599000,32942.6218016102],[1609726499000,32924.5334066142],[1609727399000,32886.0596485847],[1609728299000,32908.4502777895],[1609729199000,33279.5665545285],[1609730099000,33205.1310630816],[1609730999000,33159.3680648564],[1609731899000,33084.725437519],[1609732799000,33286.8262659938],[1609733699000,33237.447221748],[1609734599000,33094.2962733157],[1609735499000,33014.6725476379],[1609736399000,33074.6761924933],[1609737299000,32949.1470873815],[1609738199000,33010.2996810021],[1609739099000,32774.2091282182],[1609739999000,32641.6652542783],[1609740899000,32832.1256108476],[1609741799000,33043.1431943704],[1609742699000,32807.9490744611],[1609743599000,32928.6310845662],[1609744499000,32642.1175228319],[1609745399000,32116.2720826397],[1609746299000,31913.3677782956],[1609747199000,31772.8956179933],[1609748099000,32154.3736563723],[1609748999000,31979.3173165089],[1609749899000,31585.6030539423],[1609750799000,31793.65107193],[1609751699000,31519.112320737],[1609752599000,31359.313265967],[1609753499000,30802.5131122976],[1609754399000,30943.4264190637],[1609755299000,30173.7376260237],[1609756199000,29068.6321354482],[1609757099000,29413.15699522],[1609757999000,30090.7581456642],[1609758899000,29771.6424011877],[1609759799000,30181.8287046207],[1609760699000,30209.6151244332],[1609761599000,30777.4883861824],[1609762499000,30844.9725029019],[1609763399000,31121.7487444034],[1609764299000,31265.2917687078],[1609765199000,31239.4653539222],[1609766099000,30921.5635795974],[1609766999000,31120.1161685085],[1609767899000,30998.4919747332],[1609768799000,31299.5601486923],[1609769699000,31599.6862801283],[1609770599000,31678.0111765763],[1609771499000,31809.8806468198],[1609772399000,32103.4937121829],[1609773299000,31908.7846258739],[1609774199000,32002.6135321021],[1609775099000,31893.1881153766],[1609775999000,31703.9736453635],[1609776899000,31197.8941920559],[1609777799000,30916.9215419576],[1609778699000,31119.5264495806],[1609779599000,31356.9951024373],[1609780499000,31193.9640948183],[1609781399000,31119.5657569048],[1609782299000,30845.3272737978],[1609783199000,31015.9839838465],[1609784099000,31190.9675387546],[1609784999000,31349.1962925082],[1609785899000,31339.8124865447],[1609786799000,31143.8698524179],[1609787699000,31132.900353406],[1609788599000,31397.5438474861],[1609789499000,31719.675479715],[1609790399000,31691.4913876975],[1609791299000,31529.9137785617],[1609792199000,31410.3521662145],[1609793099000,31291.0409763719],[1609793999000,31263.9520326982],[1609794899000,31485.4406242645],[1609795799000,31097.6121442872],[1609796699000,30932.2088323474],[1609797599000,31018.4017832425],[1609798499000,31164.1011639094],[1609799399000,31281.1768282549]]}}'
    external_data = json.loads(data)
    prices = [entry[1] for entry in external_data['data']['entries']]
    return prices


def main():
    json_config = JsonConfig()
    data_sink = Observable()
    builder = Builder(json_config)
    builder.bind(data_sink)

    try:
        while True:
            try:
                prices = fetch_prices()
                data_sink.update_observers(prices)
                time.sleep(REFRESH_INTERVAL)
            except HTTPError as e:
                print(e)
                time.sleep(5)
    except IOError as e:
        print(e)
    except KeyboardInterrupt:
        print("exiting")
        data_sink.close()
        exit()


if __name__ == "__main__":
    main()
